完成一款图片查看功能

图片格式支持：解码与编码多种主流和非主流图片格式（如JPG、PNG、GIF、BMP等），以及PDF文档格式解析。
性能优化：优化高分辨率照片的浏览性能，提升画质和看图速度。通过多线程技术提高图片预览的即时性。
缓存与内存管理：使用独创的缓存技术，降低内存和CPU占用，确保低配置电脑的流畅使用。并具备高效的内存管理机制，避免内存泄漏。
用户界面：简洁直观的UI设计，功能清晰分块，提升用户体验。
交互体验：支持鼠标滚轮缩放、拖拽图片、快捷键等便捷操作方式。
批量处理功能：支持图片批量格式转换、尺寸修改、重命名等，提升处理效率。
平台适配：针对不同操作系统优化，确保软件在各平台上的稳定性和性能。

要将这个项目做成类似于本地文件夹形式、无需在线服务器运行的应用。

AI 提供可以完成效果的思路。
1. Electron + React
2. Progressive Web App (PWA)
3. 本地 HTML 文件 + React

我决定使用 Electron + React ，因为没有用过 Electron ，所以需要学习。

第一步：需要一个完整的项目流程图。让 AI 帮我们生成。
检查项目流程图是否正确。
第二步：根据流程图，使用 Electron 和 React 实现项目。
在命令行输入提供的命令并等待项目初始化成功。

问题： idealTree:src: sill idealTree buildDeps 在这一阶段卡住了。可能是网络问题。
使用 npm 基本会卡住，建议使用 yarn.

第三步：项目已经启动成功了，如何使用 Electron 来完成一个桌面端？
问题：yarn build --cwd app 不能运行成功。
确认 app 目录结构
检查 yarn 安装和依赖
yarn electron-builder --version 找不到 electron-builder 尝试全局安装
使用 cross-env 来跨平台支持路径
node_modules/.bin/ 目录下是否不存在 electron-builder
确保你使用的 Node.js 和 npm/yarn 版本与 electron-builder 兼容。
ETIMEDOUT，网络连接超时。
清理缓存 使用代理
start 脚本中使用了 & 来并行运行两个命令，这在 Windows 上可能会导致问题。如果你是在 Windows 环境下开发，建议使用 concurrently 这个包来并行运行脚本。

可能是网络问题，打包失败。
尝试直接使用 Electron 建立一个项目测试。
测试成功。

第四步：优化项目结构。
完成项目优化，添加一个 README.md 用来记录项目结构。
替换掉 app logo 和 图标。

项目概述：
  开发一款本地运行的图片查看应用
  主要功能包括多格式支持、性能优化、缓存管理、用户界面设计、交互体验和批量处理
  开发进展：
  已经成功初始化并运行了基本的 Electron 项目
  实现了基本的图片查看功能，包括缩略图显示和大图预览
  添加了可调整的布局，允许用户调整缩略图区域和预览区域的比例
  实现了图片信息显示功能
当前重点：
  优化项目结构
  解决跨平台开发中遇到的问题
  完善 README.md 文档
  替换应用 logo 和图标
  待解决的问题：
  使用 cross-env 来解决跨平台环境变量设置问题
  优化 npm scripts，特别是 "dev" 脚本，确保在所有平台上都能正常运行
  考虑使用 concurrently 包来并行运行多个命令，特别是在 Windows 环境下
下一步计划：
  实现更多高级功能，如图片格式转换、批量处理等
  优化性能，特别是对高分辨率图片的处理
  实现缓存和内存管理机制
  添加更多交互功能，如鼠标滚轮缩放、拖拽图片等
  进行跨平台测试和优化
  技术注意点：
  确保 Node.js 和 npm/yarn 版本与 electron-builder 兼容
  注意处理网络问题，可能需要配置代理或更换镜像源
  在 package.json 中正确配置 "type" 字段，确保模块系统兼容性
7. 文档和版本控制：
  持续更新 README.md，记录项目结构和开发进展
  使用版本控制系统（如 Git）跟踪项目变更